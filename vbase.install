<?php

/**
 * Implements hook_install().
 */
function vbase_install() {

}

/**
 * Implements hook_requirements().
 */
function vbase_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    if (\Drupal::config('file.settings')->get('make_unused_managed_files_temporary')) {
      $requirements['vbase_unused_managed_files'] = [
        'severity' => REQUIREMENT_ERROR,
        'title' => 'Virdini Files',
        'value' => t('Dealing with unexpected file deletion due to incorrect file usage'),
        'description' => t('Disable this option until <a href="@issue_url">issue #@issue</a> is fixed.', [
          '@issue' => '2821423',
          '@issue_url' => 'https://www.drupal.org/project/drupal/issues/2821423',
        ]),
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_install_tasks().
 */
function vbase_install_tasks(&$install_state) {
  return [
    'vbase_final_setup' => [],
  ];
}

function vbase_final_setup(&$install_state) {
  $config = \Drupal::configFactory();

  // IMCE
  $config->getEditable('imce.settings')
    ->set('admin_theme', TRUE)
    ->set('roles_profiles.admin.public', 'admin')
    ->save(TRUE);
  $config->getEditable('imce.profile.admin')
    ->set('conf.folders', [
      ['path' => 'inline/images', 'permissions' => ['all' => TRUE]],
      ['path' => 'inline/files', 'permissions' => ['all' => TRUE]],
    ])
    ->save(TRUE);

  // Imagick
  $config->getEditable('imagick.config')
    ->set('jpeg_quality', 80)
    ->save(TRUE);

  // Pathauto
  $config->getEditable('pathauto.settings')
    ->set('enabled_entity_types', [])
    ->save(TRUE);

  // Disable detailed cron logging
  $config->getEditable('system.cron')
    ->set('logging', FALSE)
    ->save(TRUE);

  // Disable the user pictures on nodes.
  $config->getEditable('system.theme.global')
    ->set('features.node_user_picture', FALSE)
    ->save(TRUE);

  // Disable user registration.
  $config->getEditable('user.settings')
    ->set('register', 'admin_only')
    ->save(TRUE);

  // Set the first day of the week.
  $config->getEditable('system.date')
    ->set('first_day', 1)
    ->save(TRUE);

  // Disable gzip compression
  $config->getEditable('system.performance')
    ->set('css.gzip', FALSE)
    ->set('js.gzip', FALSE)
    ->save(TRUE);

  // Disable advagg brotli compression
  $config->getEditable('advagg.settings')
    ->set('css.brotli', FALSE)
    ->set('js.brotli', FALSE)
    ->save(TRUE);

  // Set advagg js minifer to JSqueeze and hide licensing comments
  $config->getEditable('advagg_js_minify.settings')
    ->set('add_license', FALSE)
    ->set('minifier', 5)
    ->save(TRUE);

  // Disable views live preview
  $config->getEditable('views.settings')
    ->set('ui.always_live_preview', FALSE)
    ->save(TRUE);

  // Change content date format
  $config->getEditable('views.view.content')
    ->set('display.default.display_options.fields.changed.settings.date_format', 'medium')
    ->save(TRUE);

  // Change watchdog date format
  $config->getEditable('views.view.watchdog')
    ->set('display.default.display_options.fields.timestamp.date_format', 'medium')
    ->save(TRUE);

  // Disable unnecessary views
  $config->getEditable('views.view.content_recent')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.frontpage')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.taxonomy_term')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.who_s_new')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.who_s_online')
    ->set('status', FALSE)
    ->save(TRUE);

  // Add indexes
  _vbase_add_indexes();
}

/**
 * Add indexes for base fields 'Published from' and 'Unpublished from'
 */
function _vbase_add_indexes() {
  $db = \Drupal::database();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('node');
  $table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
  $schema = $db->schema();

  foreach (['pubdate' => 'pubstatus', 'unpubdate' => 'unpubstatus'] as $field => $index) {
    if (!$schema->indexExists($table, $index)) {
      $spec = [
        'fields' => [
          'status' => [
            'type' => 'int',
          ],
          $field => [
            'type' => 'int',
          ],
        ],
      ];
      $schema->addIndex($table, $index, ['status', $field], $spec);
    }
  }
}
